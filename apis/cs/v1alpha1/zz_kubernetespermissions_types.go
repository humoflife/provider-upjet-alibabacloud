// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KubernetesPermissionsInitParameters struct {

	// A list of user permission. See permissions below.
	Permissions []PermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set is_ram_role to true during authorization.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type KubernetesPermissionsObservation struct {

	// Resource id.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of user permission. See permissions below.
	Permissions []PermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set is_ram_role to true during authorization.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type KubernetesPermissionsParameters struct {

	// A list of user permission. See permissions below.
	// +kubebuilder:validation:Optional
	Permissions []PermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The ID of the Ram user, and it can also be the id of the Ram Role. If you use Ram Role id, you need to set is_ram_role to true during authorization.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type PermissionsInitParameters struct {

	// The ID of the cluster that you want to manage, When role_type value is all-clusters, the value of cluster must be "".
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Specifies whether to perform a custom authorization. To perform a custom authorization, the value of is_custom must be true, and set role_name to a custom cluster role.
	IsCustom *bool `json:"isCustom,omitempty" tf:"is_custom,omitempty"`

	// Specifies whether the permissions are granted to a RAM role. When uid is ram role id, the value of is_ram_role must be true.
	IsRAMRole *bool `json:"isRamRole,omitempty" tf:"is_ram_role,omitempty"`

	// The namespace to which the permissions are scoped. This parameter is required only if you set role_type to namespace.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the predefined role that you want to assign. Valid values admin, ops, dev, restricted and the custom cluster roles.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// The authorization type. Valid values cluster, namespace and all-clusters.
	RoleType *string `json:"roleType,omitempty" tf:"role_type,omitempty"`
}

type PermissionsObservation struct {

	// The ID of the cluster that you want to manage, When role_type value is all-clusters, the value of cluster must be "".
	Cluster *string `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Specifies whether to perform a custom authorization. To perform a custom authorization, the value of is_custom must be true, and set role_name to a custom cluster role.
	IsCustom *bool `json:"isCustom,omitempty" tf:"is_custom,omitempty"`

	// Specifies whether the permissions are granted to a RAM role. When uid is ram role id, the value of is_ram_role must be true.
	IsRAMRole *bool `json:"isRamRole,omitempty" tf:"is_ram_role,omitempty"`

	// The namespace to which the permissions are scoped. This parameter is required only if you set role_type to namespace.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the predefined role that you want to assign. Valid values admin, ops, dev, restricted and the custom cluster roles.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`

	// The authorization type. Valid values cluster, namespace and all-clusters.
	RoleType *string `json:"roleType,omitempty" tf:"role_type,omitempty"`
}

type PermissionsParameters struct {

	// The ID of the cluster that you want to manage, When role_type value is all-clusters, the value of cluster must be "".
	// +kubebuilder:validation:Optional
	Cluster *string `json:"cluster" tf:"cluster,omitempty"`

	// Specifies whether to perform a custom authorization. To perform a custom authorization, the value of is_custom must be true, and set role_name to a custom cluster role.
	// +kubebuilder:validation:Optional
	IsCustom *bool `json:"isCustom,omitempty" tf:"is_custom,omitempty"`

	// Specifies whether the permissions are granted to a RAM role. When uid is ram role id, the value of is_ram_role must be true.
	// +kubebuilder:validation:Optional
	IsRAMRole *bool `json:"isRamRole,omitempty" tf:"is_ram_role,omitempty"`

	// The namespace to which the permissions are scoped. This parameter is required only if you set role_type to namespace.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Specifies the predefined role that you want to assign. Valid values admin, ops, dev, restricted and the custom cluster roles.
	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`

	// The authorization type. Valid values cluster, namespace and all-clusters.
	// +kubebuilder:validation:Optional
	RoleType *string `json:"roleType" tf:"role_type,omitempty"`
}

// KubernetesPermissionsSpec defines the desired state of KubernetesPermissions
type KubernetesPermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KubernetesPermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KubernetesPermissionsInitParameters `json:"initProvider,omitempty"`
}

// KubernetesPermissionsStatus defines the observed state of KubernetesPermissions.
type KubernetesPermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KubernetesPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KubernetesPermissions is the Schema for the KubernetesPermissionss API. Provides a Alicloud resource to grant RBAC permissions for ACK cluster.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloud}
type KubernetesPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.uid) || (has(self.initProvider) && has(self.initProvider.uid))",message="spec.forProvider.uid is a required parameter"
	Spec   KubernetesPermissionsSpec   `json:"spec"`
	Status KubernetesPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KubernetesPermissionsList contains a list of KubernetesPermissionss
type KubernetesPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KubernetesPermissions `json:"items"`
}

// Repository type metadata.
var (
	KubernetesPermissions_Kind             = "KubernetesPermissions"
	KubernetesPermissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KubernetesPermissions_Kind}.String()
	KubernetesPermissions_KindAPIVersion   = KubernetesPermissions_Kind + "." + CRDGroupVersion.String()
	KubernetesPermissions_GroupVersionKind = CRDGroupVersion.WithKind(KubernetesPermissions_Kind)
)

func init() {
	SchemeBuilder.Register(&KubernetesPermissions{}, &KubernetesPermissionsList{})
}
